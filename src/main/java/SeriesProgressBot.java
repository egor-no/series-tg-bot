import data.Series;
import data.SeriesProgressService;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.*;
import java.util.stream.Collectors;

public class SeriesProgressBot extends TelegramLongPollingBot {

    private final SeriesProgressService seriesService;
    private final Map<Long, UserSession> sessions = new HashMap<>();
    private final InlineKeyboardMarkup mainMenu;

    public SeriesProgressBot(SeriesProgressService seriesService) {
        this.seriesService = seriesService;
        this.mainMenu = buildMainMenu();
    }

    @Override
    public String getBotUsername() {
        return "SeriesProgressBot";
    }

    @Override
    public String getBotToken() {
        return System.getenv("BOT_TOKEN");
    }

    private void sendReply(long chatId, String text, InlineKeyboardMarkup markup) {
        SendMessage response = new SendMessage();
        response.setChatId(String.valueOf(chatId));
        response.setText(text);
        if (markup != null) response.setReplyMarkup(markup);
        try {
            execute(response);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean isNumeric(String str) {
        return str.matches("\\d+");
    }

    private ParsedTitle parseTitleSeasonEpisode(String input) {
        String[] words = input.trim().split(" ");
        int season = 0, episode = 0;
        String title;

        if (words.length >= 3 &&
                isNumeric(words[words.length - 1]) &&
                isNumeric(words[words.length - 2])) {

            episode = Integer.parseInt(words[words.length - 1]);
            season = Integer.parseInt(words[words.length - 2]);
            title = String.join(" ", Arrays.copyOfRange(words, 0, words.length - 2));
        } else {
            title = input.trim();
            season = -1;
            episode = -1;
        }

        return new ParsedTitle(title, season, episode);
    }

    private String handleStatus(long chatId) {
        List<Series> seriesList = seriesService.getAll(chatId);
        if (seriesList.isEmpty()) {
            return "–¢—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞.";
        }
        StringBuilder sb = new StringBuilder("–¢–≤–æ–∏ —Å–µ—Ä–∏–∞–ª—ã:\n");
        for (Series s : seriesList) {
            String statusMark = s.getStatus().equals("finished") ? "üèÅ " : "";
            sb.append("‚Ä¢ ").append(statusMark)
                    .append(s.getName())
                    .append(" ‚Äî –°–µ–∑–æ–Ω ").append(s.getSeason())
                    .append(", –≠–ø–∏–∑–æ–¥ ").append(s.getEpisode())
                    .append("\n");
        }
        return sb.toString();
    }

    private InlineKeyboardMarkup buildMainMenu() {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(InlineKeyboardButton.builder()
                .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª")
                .callbackData("add")
                .build());
        row.add(InlineKeyboardButton.builder()
                .text("‚úè\uFE0F –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–µ—Ä–∏–∞–ª")
                .callbackData("rename")
                .build());
        row.add(InlineKeyboardButton.builder()
                .text("‚ùå –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏–∞–ª")
                .callbackData("delete")
                .build());
        rows.add(row);
        row = new ArrayList<>();
        row.add(InlineKeyboardButton.builder()
                .text("üìã –°—Ç–∞—Ç—É—Å")
                .callbackData("status")
                .build());
        row.add(InlineKeyboardButton.builder()
                .text("‚öô –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
                .callbackData("set")
                .build());
        rows.add(row);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);
        return markup;
    }

    private InlineKeyboardMarkup buildSeriesChoiceMenu(long chatId, String callbackPrefix, String icon) {
        List<Series> seriesList = seriesService.getAll(chatId);

        List<List<InlineKeyboardButton>> rows = seriesList.stream()
                .map(s -> {
                    boolean isFinished = "finished".equals(s.getStatus());
                    String prefix = isFinished ? "üèÅ " : icon + " ";
                    return List.of(InlineKeyboardButton.builder()
                            .text(prefix + s.getName())
                            .callbackData(callbackPrefix + s.getName())
                            .build());
                })
                .collect(Collectors.toList());

        return InlineKeyboardMarkup.builder().keyboard(rows).build();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            UserSession session = sessions.computeIfAbsent(chatId, id -> new UserSession());

            switch (session.state) {
                case AWAITING_ADD -> {
                    session.state = State.IDLE;
                    ParsedTitle parsed = parseTitleSeasonEpisode(text);
                    int season = parsed.season() >= 0 ? parsed.season() : 1;
                    int episode = parsed.episode() >= 0 ? parsed.episode() : 1;
                    seriesService.saveOrUpdate(chatId, parsed.title(), season, episode);
                    sendReply(chatId, "–î–æ–±–∞–≤–ª–µ–Ω–æ: " + parsed.title() + " ‚Äî –°–µ–∑–æ–Ω " + season + ", –≠–ø–∏–∑–æ–¥ " + episode
                            + ". –ß—Ç–æ –µ—â—ë —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", mainMenu);
                }
                case AWAITING_SET_SEASON -> {
                    try {
                        int season = Integer.parseInt(text);
                        session.manualSeason = season;
                        session.state = State.AWAITING_SET_EPISODE;
                        sendReply(chatId, "–¢–µ–ø–µ—Ä—å —ç–ø–∏–∑–æ–¥?", null);
                    } catch (NumberFormatException e) {
                        sendReply(chatId, "–°–µ–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", null);
                    }
                }
                case AWAITING_SET_EPISODE -> {
                    try {
                        int episode = Integer.parseInt(text);
                        String title = session.selectedTitle;
                        int season = session.manualSeason;
                        seriesService.saveOrUpdate(chatId, title, season, episode);
                        session.state = State.IDLE;
                        session.selectedTitle = null;
                        session.manualSeason = null;
                        sendReply(chatId, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + title + " ‚Äî –°–µ–∑–æ–Ω " + season + ", –≠–ø–∏–∑–æ–¥ " + episode, mainMenu);
                    } catch (NumberFormatException e) {
                        sendReply(chatId, "–≠–ø–∏–∑–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", null);
                    }
                }
                case AWAITING_RENAME_INPUT -> {
                    String oldTitle = session.selectedTitle;
                    String newTitle = text.trim();

                    if (newTitle.isEmpty()) {
                        sendReply(chatId, "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", null);
                        return;
                    }

                    Series s = seriesService.getByName(chatId, oldTitle);
                    if (s != null) {
                        seriesService.delete(chatId, oldTitle);
                        seriesService.saveOrUpdate(chatId, newTitle, s.getSeason(), s.getEpisode());
                    }

                    session.state = State.IDLE;
                    session.selectedTitle = null;

                    sendReply(chatId, "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: \"" + oldTitle + "\" ‚Üí \"" + newTitle + "\"", mainMenu);
                }
                default -> {
                    if (text.equals("/start")) {
                        sendReply(chatId, "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", mainMenu);
                    } else {
                        sendReply(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é", mainMenu);
                    }
                }
            }
        }

        //–ö–ù–û–ü–ö–ò
        if (update.hasCallbackQuery()) {
            System.out.println("CallbackQuery received: " + update.getCallbackQuery().getData());

            String data = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            UserSession session = sessions.computeIfAbsent(chatId, id -> new UserSession());

            if (session.state == State.AWAITING_SET_CHOICE && data.startsWith("set_")) {
                String title = data.substring(4);
                session.selectedTitle = title;
                session.state = State.AWAITING_SET_ACTION;

                Series s = seriesService.getByName(chatId, title);

                if (s == null) {
                    sendReply(chatId, "–°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", mainMenu);
                    session.state = State.IDLE;
                    return;
                }

                InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                rows.add(List.of(
                                InlineKeyboardButton.builder().text("üéØ –í—Ä—É—á–Ω—É—é").callbackData("set_manual").build(),
                                InlineKeyboardButton.builder().text("üèÅ –°–µ—Ä–∏–∞–ª –∑–∞–∫–æ–Ω—á–µ–Ω").callbackData("set_finish").build()
                         ));
                rows.add(List.of(
                                InlineKeyboardButton.builder().text("‚è≠ –°–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥").callbackData("set_next_ep").build(),
                                InlineKeyboardButton.builder().text("üìÖ –°–ª–µ–¥—É—é—â–∏–π —Å–µ–∑–æ–Ω").callbackData("set_next_season").build()
                        ));

                if ("finished".equalsIgnoreCase(s.getStatus())) {
                    rows.add(List.of(
                            InlineKeyboardButton.builder()
                                    .text("üé¨ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
                                    .callbackData("set_restart")
                                    .build()
                    ));
                }

                markup.setKeyboard(rows);

                sendReply(chatId, "–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å \"" + title + "\"?", markup);
                return;
            }

            if (session.state == State.AWAITING_SET_ACTION) {
                String title = session.selectedTitle;
                Series s = seriesService.getByName(chatId, title);

                if (s != null) {
                    switch (data) {
                        case "set_manual" -> {
                            session.state = State.AWAITING_SET_SEASON;
                            sendReply(chatId, "–£–∫–∞–∂–∏ —Å–µ–∑–æ–Ω –¥–ª—è \"" + title + "\":", null);
                            return;
                        }
                        case "set_next_ep" -> {
                            seriesService.saveOrUpdate(chatId, title, s.getSeason(), s.getEpisode() + 1);
                        }
                        case "set_next_season" -> {
                            seriesService.saveOrUpdate(chatId, title, s.getSeason() + 1, 1);
                        }
                        case "set_finish" -> {
                            seriesService.setStatus(chatId, title, "finished");
                            session.state = State.IDLE;
                            session.selectedTitle = null;
                            sendReply(chatId, "–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª \"" + title + "\" üéâ. –¢–µ–ø–µ—Ä—å –æ–Ω –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π. ", mainMenu);
                            return;
                        }
                        case "set_restart" -> {
                            seriesService.setStatus(chatId, title, "");
                            seriesService.saveOrUpdate(chatId, title, 1, 1);
                            session.state = State.IDLE;
                            session.selectedTitle = null;
                            sendReply(chatId, "–°–µ—Ä–∏–∞–ª \"" + title + "\" —Å–±—Ä–æ—à–µ–Ω: —Å–Ω–æ–≤–∞ –°–µ–∑–æ–Ω 1, –≠–ø–∏–∑–æ–¥ 1.", mainMenu);
                            return;
                        }

                    }
                }

                session.state = State.IDLE;
                session.selectedTitle = null;
                sendReply(chatId, "–û–±–Ω–æ–≤–ª–µ–Ω–æ: " + title, mainMenu);
                return;
            }

            if (session.state == State.AWAITING_DELETE_CHOICE && data.startsWith("delete_")) {
                String title = data.substring("delete_".length());
                seriesService.delete(chatId, title);
                sendReply(chatId, "–°–µ—Ä–∏–∞–ª \"" + title + "\" —É–¥–∞–ª—ë–Ω.", mainMenu);
                session.state = State.IDLE;
                return;
            }

            if (session.state == State.AWAITING_RENAME_CHOICE && data.startsWith("rename_")) {
                String oldTitle = data.substring(7);
                session.selectedTitle = oldTitle;
                session.state = State.AWAITING_RENAME_INPUT;
                sendReply(chatId, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è \"" + oldTitle + "\":", null);
                return;
            }

            System.out.println("Callback data: " + data);
            switch (data) {
                case "add" -> {
                    session.state = State.AWAITING_ADD;
                    sendReply(chatId, "–í–≤–µ–¥–∏ —Å–µ—Ä–∏–∞–ª (–º–æ–∂–Ω–æ —Å—Ä–∞–∑—É —Å —Å–µ–∑–æ–Ω–æ–º –∏ —ç–ø–∏–∑–æ–¥–æ–º):", null);
                }
                case "set" -> {
                    List<Series> list = seriesService.getAll(chatId);
                    if (list.isEmpty()) {
                        sendReply(chatId, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–∏–∞–ª–æ–≤.", mainMenu);
                        return;
                    }
                    session.state = State.AWAITING_SET_CHOICE;
                    sendReply(chatId, "–í—ã–±–µ—Ä–∏ —Å–µ—Ä–∏–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
                            buildSeriesChoiceMenu(chatId, "set_", "üé¨"));
                }
                case "rename" -> {
                    List<Series> list = seriesService.getAll(chatId);
                    if (list.isEmpty()) {
                        sendReply(chatId, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–∏–∞–ª–æ–≤.", mainMenu);
                        return;
                    }
                    session.state = State.AWAITING_RENAME_CHOICE;
                    sendReply(chatId, "–í—ã–±–µ—Ä–∏ —Å–µ—Ä–∏–∞–ª –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:",
                            buildSeriesChoiceMenu(chatId, "rename_", "‚úè\uFE0F"));
                }
                case "delete" -> {
                    List<Series> list = seriesService.getAll(chatId);
                    if (list.isEmpty()) {
                        sendReply(chatId, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–∏–∞–ª–æ–≤.", mainMenu);
                        return;
                    }
                    session.state = State.AWAITING_DELETE_CHOICE;
                    sendReply(chatId, "–í—ã–±–µ—Ä–∏ —Å–µ—Ä–∏–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                            buildSeriesChoiceMenu(chatId, "delete_", "‚ùå"));
                }
                case "status" -> {
                    try {
                        sendReply(chatId, handleStatus(chatId), mainMenu);
                    } catch (Exception e) {
                        e.printStackTrace();
                        sendReply(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç—É—Å–∞.", mainMenu);
                    }
                }
                default -> {
                    System.out.println("Unhandled callback: " + data);
                    sendReply(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.", mainMenu);
                }
            }
        }
    }
}

record ParsedTitle(String title, Integer season, Integer episode) {}

